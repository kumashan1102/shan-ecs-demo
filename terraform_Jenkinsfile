pipeline{
    agent any
    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timestamps()
    }
    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '121196576469'
        AWS_ACCESS_KEY = credentials('AWS_ACCESS_KEY')
        AWS_SECRET_KEY = credentials('AWS_SECRET_KEY')
        BACKEND_FILE_PATH = "./backend/dev.tfbackend"
        TFVAR_PATH = "./tfvars/dev.tfvars"
    }
    stages {
        stage ('Terraform Init') {
            steps {
                script {
                    withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'shan@121196576469', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh """terraform init"""
                    }
                }
            }
        }
        stage ('Terraform Plan') {
            steps {
                script {
                    withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'shan@121196576469', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh """terraform plan -var-file=${TFVAR_PATH}"""
                    }
                }
            }
        }
        stage ('Terraform Apply') {
            input message: 'Should we proceed to Deploy?', parameters: [choice(choices: ['APPROVED', 'REJECTED'], name: 'Approval_Request')]
            when {
                params.Approval_Request == 'APPROVED'
            }
            steps {
                script {
                    withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'shan@121196576469', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh """terraform apply -var-file=${TFVAR_PATH} -auto-approve"""
                    }
                }
            }
        }
        stage ('Clean Workspace') {
            steps{
                cleanWs()
            }
        }
    }
    post {
        failure {
            cleanWs()
        }
    }
}